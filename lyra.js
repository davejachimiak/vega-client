// Generated by CoffeeScript 1.7.1
(function() {
  var Lyra;

  Lyra = (function() {
    function Lyra(url, roomId, badge, localStream) {
      this.url = url;
      this.roomId = roomId;
      this.badge = badge;
      this.localStream = localStream;
      this.vc = new VegaClient(this.url, this.roomId, this.badge);
      this.pcConfig = {
        'iceServers': [
          {
            'url': 'stun:stun.l.google.com:19302'
          }
        ]
      };
      this.callbacks = {};
      this.peerConnections = {};
    }

    Lyra.prototype.init = function() {
      this.setupCallbacks();
      return this.vc.call();
    };

    Lyra.prototype.setupCallbacks = function() {
      this.vc.on('callAccepted', (function(_this) {
        return function(payload) {
          return _.each(payload.peerIds, function(peerId) {
            var pc;
            pc = _this.addPeerConection(peerId);
            return _this.initiateOffer(pc, peerId);
          });
        };
      })(this));
      this.vc.on('roomFull', (function(_this) {
        return function(payload) {
          _this.vc.close();
          return console.error('room is full');
        };
      })(this));
      this.vc.on('offer', (function(_this) {
        return function(payload) {
          var badge, pc, peerId, remoteDescription;
          peerId = payload.peerId;
          badge = payload.badge;
          pc = _this.addPeerConection(peerId);
          remoteDescription = new RTCSessionDescription(payload.offer);
          pc.setRemoteDescription(remoteDescription);
          return _this.initiateAnswer(pc, peerId);
        };
      })(this));
      this.vc.on('answer', (function(_this) {
        return function(payload) {
          var pc, remoteDescription;
          pc = _this.peerConnections[payload.peerId];
          remoteDescription = new RTCSessionDescription(payload.answer);
          return pc.setRemoteDescription(remoteDescription);
        };
      })(this));
      this.vc.on('candidate', (function(_this) {
        return function(payload) {
          var candidate, pc;
          pc = _this.peerConnections[payload.peerId];
          candidate = new RTCIceCandidate(payload.candidate);
          return pc.addIceCandidate(candidate);
        };
      })(this));
      this.vc.on('peerHangUp', (function(_this) {
        return function(payload) {
          var peerId;
          peerId = payload.peerId;
          _this.trigger('peerHangUp', peerId);
          return delete _this.peerConnections[peerId];
        };
      })(this));
      return this.vc.on('unexpectedPeerHangUp', (function(_this) {
        return function(payload) {
          var peerId;
          peerId = payload.peerId;
          _this.trigger('unexpectedPeerHangUp', peerId);
          return delete _this.peerConnections[peerId];
        };
      })(this));
    };

    Lyra.prototype.addPeerConection = function(peerId) {
      var pc;
      pc = this.peerConnection(peerId);
      pc.addStream(this.localStream);
      pc.onaddstream = (function(_this) {
        return function(event) {
          return _this.trigger('remoteStreamAdded', peerId, event.stream);
        };
      })(this);
      this.peerConnections[peerId] = pc;
      return pc;
    };

    Lyra.prototype.peerConnection = function(peerId) {
      var pc;
      pc = new webkitRTCPeerConnection(this.pcConfig);
      pc.onicecandidate = (function(_this) {
        return function(event) {
          var candidate;
          if (candidate = event.candidate) {
            return _this.vc.candidate(candidate, peerId);
          }
        };
      })(this);
      return pc;
    };

    Lyra.prototype.initiateOffer = function(pc, peerId) {
      var success;
      success = (function(_this) {
        return function(desc) {
          return pc.setLocalDescription(desc, function() {
            return _this.vc.offer(pc.localDescription, peerId);
          }, _this.logError);
        };
      })(this);
      return pc.createOffer(success, this.logError);
    };

    Lyra.prototype.initiateAnswer = function(pc, peerId) {
      var success;
      success = (function(_this) {
        return function(desc) {
          return pc.setLocalDescription(desc, function() {
            return _this.vc.answer(pc.localDescription, peerId);
          }, _this.logError);
        };
      })(this);
      return pc.createAnswer(success, this.logError);
    };

    Lyra.prototype.trigger = function(event) {
      var args, callbacks;
      args = _.tail(arguments);
      if (callbacks = this.callbacks[event]) {
        return _.each(callbacks, (function(_this) {
          return function(callback) {
            return callback.apply(_this, args);
          };
        })(this));
      }
    };

    Lyra.prototype.on = function(event, callback) {
      var _base;
      (_base = this.callbacks)[event] || (_base[event] = []);
      return this.callbacks[event].push(callback);
    };

    Lyra.prototype.logError = function(error) {
      return console.error(error);
    };

    return Lyra;

  })();

  window.Lyra = Lyra;

}).call(this);
