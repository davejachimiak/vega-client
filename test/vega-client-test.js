// Generated by CoffeeScript 1.7.1
(function() {
  describe('VegaClient', function() {
    beforeEach(function() {
      this.url = 'ws:0.0.0.0:9292';
      this.roomId = '/chat/abc123';
      this.badge = {
        name: 'Dave'
      };
      return this.client = new VegaClient(this.url, this.roomId, this.badge);
    });
    afterEach(function() {
      return sinon.collection.restore();
    });
    describe('.send', function() {
      beforeEach(function() {
        this.message = {
          type: 'hangUp',
          payload: {}
        };
        return this.stringifiedMessage = JSON.stringify(this.message);
      });
      describe('when WebSocket is connecting', function() {
        beforeEach(function() {
          this.websocket = {
            readyState: 0,
            CONNECTING: 0,
            send: function() {}
          };
          return this.send = sinon.collection.stub(this.websocket, 'send');
        });
        return it('sends the message when the websocket becomes open', function() {
          VegaClient.send(this.websocket, this.message);
          expect(this.send).to.not.have.been.called;
          this.websocket.onopen();
          return expect(this.send).to.have.been.calledWith(this.stringifiedMessage);
        });
      });
      return describe('when WebSocket is not connecting', function() {
        beforeEach(function() {
          this.websocket = {
            readyState: 1,
            CONNECTING: 0,
            send: function() {}
          };
          return this.send = sinon.collection.stub(this.websocket, 'send');
        });
        return it('sends the message immediately', function() {
          VegaClient.send(this.websocket, this.message);
          return expect(this.send).to.have.been.calledWith(this.stringifiedMessage);
        });
      });
    });
    describe('#constructor', function() {
      describe('arguments are satisfied', function() {
        return it('sets the onmessage callback', function() {
          var websocket;
          websocket = this.client.websocket;
          return expect(websocket.onmessage).to.equal(this.client.onmessage);
        });
      });
      describe('zero arguments are passed', function() {
        return it('throws an error', function() {
          return expect((function(_this) {
            return function() {
              return new VegaClient();
            };
          })(this)).to["throw"](TypeError);
        });
      });
      describe('one argument is passed', function() {
        return it('throws an error', function() {
          return expect((function(_this) {
            return function() {
              return new VegaClient(_this.url);
            };
          })(this)).to["throw"](TypeError);
        });
      });
      return describe('two arguments are passed', function() {
        return it('throws an error', function() {
          return expect((function(_this) {
            return function() {
              return new VegaClient(_this.url, _this.roomId);
            };
          })(this)).to["throw"](TypeError);
        });
      });
    });
    describe('#onmessage', function() {
      return it('triggers callbacks set on the type and the payload', function() {
        var data, message, offer1, offer2, payload;
        payload = {
          offer: {},
          peerId: 'f4321169-131c-4ae9-93f5-177fafe02e59',
          peerBadge: {
            name: 'Allie'
          }
        };
        data = JSON.stringify({
          type: 'offer',
          payload: payload
        });
        message = {
          data: data
        };
        offer1 = [];
        offer2 = [];
        this.client.on('offer', (function(_this) {
          return function(pload) {
            return offer1.push(pload);
          };
        })(this));
        this.client.on('offer', (function(_this) {
          return function(pload) {
            return offer2.push(pload);
          };
        })(this));
        this.client.onmessage(message);
        expect(offer1).to.include(payload);
        return expect(offer2).to.include(payload);
      });
    });
    return describe('messages to server', function() {
      beforeEach(function() {
        this.stubSendWith = (function(_this) {
          return function(message) {
            return _this.send = sinon.collection.stub(VegaClient, 'send').withArgs(_this.client.websocket, message);
          };
        })(this);
        return this.assertMessageSent = (function(_this) {
          return function() {
            return expect(_this.send).to.have.been.called;
          };
        })(this);
      });
      describe('#call', function() {
        return it('sends a call message', function() {
          this.stubSendWith({
            type: 'call',
            payload: {
              roomId: this.roomId,
              badge: this.badge
            }
          });
          this.client.call();
          return this.assertMessageSent();
        });
      });
      describe('#offer', function() {
        return it('sends an offer message', function() {
          var offer, peerId;
          offer = {};
          peerId = 'f4321169-131c-4ae9-93f5-177fafe02e59';
          this.stubSendWith({
            type: 'offer',
            payload: {
              offer: offer,
              peerId: peerId
            }
          });
          this.client.offer(offer, peerId);
          return this.assertMessageSent();
        });
      });
      describe('#answer', function() {
        return it('sends an answer message', function() {
          var answer, peerId;
          answer = {};
          peerId = 'f4321169-131c-4ae9-93f5-177fafe02e59';
          this.stubSendWith({
            type: 'answer',
            payload: {
              answer: answer,
              peerId: peerId
            }
          });
          this.client.answer(answer, peerId);
          return this.assertMessageSent();
        });
      });
      describe('#candidate', function() {
        return it('sends a candidate message', function() {
          var candidate, peerId;
          candidate = {};
          peerId = 'f4321169-131c-4ae9-93f5-177fafe02e59';
          this.stubSendWith({
            type: 'candidate',
            payload: {
              candidate: candidate,
              peerId: peerId
            }
          });
          this.client.candidate(candidate, peerId);
          return this.assertMessageSent();
        });
      });
      return describe('#hangUp', function() {
        return it('sends a hangUp message', function() {
          this.stubSendWith({
            type: 'hangUp',
            payload: {}
          });
          this.client.hangUp();
          return this.assertMessageSent();
        });
      });
    });
  });

}).call(this);
